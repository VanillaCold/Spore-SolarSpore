#include "stdafx.h"
#include "cSSArchetypeWeaponSystem.h"

/// AUTOGENERATED METHODS ///

int cSSArchetypeWeaponSystem::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int cSSArchetypeWeaponSystem::Release() {
	return Simulator::cStrategy::Release();
}

const char* cSSArchetypeWeaponSystem::GetName() const {
	return "CustomTools::cSSArchetypeWeaponSystem";
}

bool cSSArchetypeWeaponSystem::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool cSSArchetypeWeaponSystem::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute cSSArchetypeWeaponSystem::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void cSSArchetypeWeaponSystem::Initialize() {
	
}

void cSSArchetypeWeaponSystem::Dispose() {
	
}

void cSSArchetypeWeaponSystem::Update(int deltaTime, int deltaGameTime) {
	
}

void cSSArchetypeWeaponSystem::OnModeEntered(uint32_t previousModeID, uint32_t newModeID)
{
	if (newModeID == GameModeIDs::kGameSpace)
	{
		if (auto inventory = SimulatorSpaceGame.GetPlayerInventory())
		{
			if (inventory->GetTool(ResourceKey( id("scan"), 0, 0) ) )
			{
			}
		}
	}
}

bool cSSArchetypeWeaponSystem::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}


ArchetypeWeapons::ArchetypeWeapons(ResourceKey propKey)
{

}