#include "stdafx.h"
#include "cSSArchetypeWeaponSystem.h"

/// AUTOGENERATED METHODS ///

int cSSArchetypeWeaponSystem::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int cSSArchetypeWeaponSystem::Release() {
	return Simulator::cStrategy::Release();
}

const char* cSSArchetypeWeaponSystem::GetName() const {
	return "CustomTools::cSSArchetypeWeaponSystem";
}

bool cSSArchetypeWeaponSystem::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool cSSArchetypeWeaponSystem::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute cSSArchetypeWeaponSystem::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void cSSArchetypeWeaponSystem::Initialize() {
	vector<uint32_t> propIDs;
	PropManager.GetPropertyListIDs(id("SS-WeaponSets"), propIDs);
	for each (uint32_t prop in propIDs)
	{
		ArchetypeWeapons weaponClass = ArchetypeWeapons(ResourceKey(prop, TypeIDs::prop, id("SS-WeaponSets")));
		mWeaponMappings.emplace(weaponClass.mArchetype, weaponClass);
	}
}

void cSSArchetypeWeaponSystem::Dispose() {
	
}

void cSSArchetypeWeaponSystem::Update(int deltaTime, int deltaGameTime) {
	
	if (mbIsFirstLaunch)
	{
		if (auto inventory = SimulatorSpaceGame.GetPlayerInventory())
		{
			if (inventory->GetTool(ResourceKey(id("laserlevel1"), 0, 0)))
			{
				RefreshTools();
				mbIsFirstLaunch = false;
			}
		}
	}
	else
	{
		if (mCurrentArchetype != Simulator::GetPlayerEmpire()->mArchetype && mCurrentArchetype != Simulator::kArchetypeGrob)
		{
			RefreshTools();
		}
	}
	if (Simulator::IsSpaceGame())
	{
		mCurrentArchetype = Simulator::GetPlayerEmpire()->mArchetype;
	}
	else
	{
		mCurrentArchetype = Simulator::Archetypes::kArchetypeGrob;
	}
}

void cSSArchetypeWeaponSystem::OnModeEntered(uint32_t previousModeID, uint32_t newModeID)
{
	mbIsFirstLaunch = false;
	mCurrentArchetype = Simulator::Archetypes::kArchetypeGrob;
	if (newModeID == GameModeIDs::kGameSpace)
	{
		if (auto inventory = SimulatorSpaceGame.GetPlayerInventory())
		{
			if (inventory->GetTool(ResourceKey( id("scan"), 0, 0) ) )
			{
				RefreshTools();
			}
			else
			{
				mbIsFirstLaunch = true;
			}
			mCurrentArchetype = Simulator::GetPlayerEmpire()->mArchetype;
		}
	}
}

bool cSSArchetypeWeaponSystem::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}

void cSSArchetypeWeaponSystem::RefreshTools()
{
	int index = 0;
	auto inventory = SimulatorSpaceGame.GetPlayerInventory();
	for (auto j = mWeaponMappings.begin(); j != mWeaponMappings.end(); j++)
	{
		auto keys = j.mpNode->mValue.second.mToolKeys;
		for (int i = 0; i < keys.size(); i++)
		{
			ResourceKey toolKey = keys[i];
			if (inventory->HasTool(ResourceKey(toolKey.instanceID, 0, 0)))
			{
				index = max(i, index);
				inventory->RemoveItem(inventory->GetTool(ResourceKey(toolKey.instanceID, 0, 0)));

				break;
			}
		}
	}

	for (int i = 0; i <= index; i++)
	{
		cSpaceToolDataPtr tool;
		uint32_t toolID = 0;
		if (mWeaponMappings.find(Simulator::GetPlayerEmpire()->mArchetype) != mWeaponMappings.end())
		{
			toolID = mWeaponMappings[Simulator::GetPlayerEmpire()->mArchetype].mToolKeys[i].instanceID;
		}
		else
		{
			toolID = mWeaponMappings[Simulator::Archetypes::kArchetypePlayerWanderer].mToolKeys[i].instanceID;
		}
		ToolManager.LoadTool(ResourceKey(toolID, 0, 0), tool);
		tool->mCurrentAmmoCount = tool->mMaxAmmoCount;
		SimulatorSpaceGame.GetPlayerInventory()->AddItem(tool.get());
	}
	

}


ArchetypeWeapons::ArchetypeWeapons(ResourceKey propKey)
{
	mArchetype = Simulator::Archetypes::kArchetypeGrob;
	if (PropManager.GetPropertyList(propKey.instanceID, propKey.groupID, mpPropList))
	{
		mToolKeys = vector<ResourceKey>();

		ResourceKey* weaponIDs;
		size_t size;
		App::Property::GetArrayKey(mpPropList.get(), id("WeaponToolIDs"), size, weaponIDs);
		for (int i = 0; i < size; i++)
		{
			mToolKeys.push_back(weaponIDs[i]);
		}
		uint32_t archetypeID;
		App::Property::GetUInt32(mpPropList.get(), id("WeaponSetArchetype"), archetypeID);

		mArchetype = (Simulator::Archetypes)archetypeID;

	}
}

ArchetypeWeapons::ArchetypeWeapons()
{
	mArchetype = Simulator::Archetypes::kArchetypeGrob;
	mToolKeys = vector<ResourceKey>();
	mpPropList = nullptr;
}
