#include "stdafx.h"
#include "cSSStatusEffectManager.h"

/// AUTOGENERATED METHODS ///

int cSSStatusEffectManager::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int cSSStatusEffectManager::Release() {
	return Simulator::cStrategy::Release();
}

const char* cSSStatusEffectManager::GetName() const {
	return "CustomTools::cSSStatusEffectManager";
}

bool cSSStatusEffectManager::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool cSSStatusEffectManager::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute cSSStatusEffectManager::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void cSSStatusEffectManager::Initialize() {
	sInstance = this;
	activeStatusEffects = map < cCombatantPtr, uint32_t>();
}

void cSSStatusEffectManager::Dispose() {
	
}

void cSSStatusEffectManager::Update(int deltaTime, int deltaGameTime) {
	vector<cCombatantPtr> invalidStatuses{};
	for(auto i = activeStatusEffects.begin(); i != activeStatusEffects.end();i++)
	{
		auto combatant = i.mpNode->mValue.first;
		if (!combatant || combatant->ToGameData()->mbIsDestroyed || combatant->mHealthPoints <= 0)
		{
			SporeDebugPrint("wooeeoo");
			invalidStatuses.push_back(combatant);
		}
	}

	for each (cCombatantPtr removal in invalidStatuses)
	{
		activeStatusEffects.erase(removal);
	}
}

bool cSSStatusEffectManager::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}

cSSStatusEffectManager* cSSStatusEffectManager::Get()
{
	return sInstance;
}

cSSStatusEffectManager* cSSStatusEffectManager::sInstance;