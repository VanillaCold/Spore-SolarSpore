#include "stdafx.h"
#include "SolarSpore_RareSpices.h"

/// AUTOGENERATED METHODS ///

int SolarSpore_RareSpices::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int SolarSpore_RareSpices::Release() {
	return Simulator::cStrategy::Release();
}

const char* SolarSpore_RareSpices::GetName() const {
	return "SolarSpore_Rare_Spices::SolarSpore_RareSpices";
}

bool SolarSpore_RareSpices::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool SolarSpore_RareSpices::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute SolarSpore_RareSpices::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	SimAttribute(SolarSpore_RareSpices,generatedstars,1),
	Simulator::Attribute()
};

void SolarSpore_RareSpices::Initialize() {
	
}

void SolarSpore_RareSpices::Dispose() {
	
}

void SolarSpore_RareSpices::Update(int deltaTime, int deltaGameTime) {
	if (Simulator::IsSpaceGame())
	{
		eastl::vector<ResourceKey> props;
		auto star = Simulator::GetActiveStarRecord();
		if (star != nullptr)
		{
			auto it = eastl::find(generatedstars.begin(), generatedstars.end(), star->mKey);
			//rarespice1
			if (star->mPlanetCount > 0 && it == generatedstars.end())
			{
				RandomNumberGenerator rng1(star->mKey * int32_t(star->mType));
				auto planet = star->mPlanets[rng1.RandomInt(star->mPlanetCount-1)];
				RandomNumberGenerator rng(rng1.seed / star->mKey * (planet->GetID() + planet->mFlags));
				rng.seed = star->mKey * planet->GetID();
				//App::ConsolePrintF(to_string(rng1.seed).c_str());
				//App::ConsolePrintF(to_string(rng.seed).c_str());
				PropertyListPtr propList;
				//vector<uint32_t> props;
				PropManager.GetPropertyList(id("RareSpiceList"), id("SolarSporeConfig"), propList);
				ResourceKey* ray;
				size_t count;
				App::Property::GetArrayKey(propList.get(), id("rareSpiceIDs"), count, ray);
				auto num = int(count);
				for (int i = 0; i < num; i += 1)
				{
					props.push_back(ray[i]);
				}
				/*			for (int i = 0; i < num; i += 1)
							{
								props.push_back(ray[i]);
							}*/

							//if (num != (1 || 0))
							//{
				int gen = rng.RandomInt(props.size());

				planet->mSpiceGen.instanceID = props[gen].instanceID;

				PropManager.GetPropertyList(props[gen].instanceID, GroupIDs::SpaceTrading, propList);
				uint32_t spicecolour;
				App::Property::GetUInt32(propList.get(), 0x058CBB75, spicecolour);
				
				cPlanetPtr planet2;
				StarManager.RecordToPlanet(planet.get(),planet2);
				planet2->field_1C4 = spicecolour;
				generatedstars.push_back(star->mKey);
				//}
			}
		}
	}
}

bool SolarSpore_RareSpices::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}

void SolarSpore_RareSpices::OnModeEntered(uint32_t previousModeID, uint32_t newModeID)
{
	//if(Simulator::IsSpaceGame() && generatedstars.capacity() == 0)
	//{ 
	//	}
}

//vector<uint32_t> SolarSpore_RareSpices::generatedstars{};